# *****************************************************************
#  Copyright 2015 MIT Lincoln Laboratory  
#  Project:            SPAR
#  Authors:            jch
#  Description:        A container class for the distributions
#                      generated by learn_distributions.py
# 
#  Modifications:
#  Date          Name           Modification
#  ----          ----           ------------
#  23 Sept 2012   jch           Original file
# *****************************************************************

class DistributionHolder(object):

    """
    This class holds all the information from learn_distributions.py
    that will be needed in generate_data.py. In particular, it holds
    three things:

    * self.var_order is a list of the variables which can be generated
      from this object, in the order in which they need to be
      generated. tems later on the list may depend on items earlier on
      the list, so this order should be respected. Often, the items in
      this list will be Enum values, and thus, integers.

    * self.var_names is a list of human-readable names for the
      variables in self.var_order. This list is for the convenience of
      aggregators (e.g., the ones that write rows to files or inser them into
      databases). This list must be in the same order as the variables in
      self.var_order.

    * self.dist_dict is a dictionary which maps variables from
      self.var_order into distributions from distributions.py or
      bespoke_distributions.py. Note that some of these distributions
      will be conditional, so they should be called (though their
      generate() methods) in the order specified by self.var_order.

      The intention is that this will be used to generate a row of
      data though code much like:

      row_dict = {}
      var_order = distribution_holder.var_order
      dist_dict = distribution_holder.dist_dict
      for var in var_order:
        dist = dist_dict[var]
        v = dist.generate(row_dict)
        row_dict[var] = v

      (which is the core of how data_generator_engine.py works).
      """

    def __init__(self, var_order, var_names, dist_dict):
        self.var_order = var_order
        self.var_names = var_names
        self.dist_dict = dist_dict
